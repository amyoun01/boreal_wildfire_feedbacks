#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2023/03/16 06:36:45
# Search URL: http://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.vas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.hursmin.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.uas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.pr.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.tasmax.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.vas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.uas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.tasmax.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.pr.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.hursmin.gn.v20190710|esgf3.dkrz.de
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.vas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.hursmin.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.uas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.pr.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-HR.historical.r1i1p1f1.day.tasmax.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.vas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.uas.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.tasmax.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.pr.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp585.r1i1p1f1.day.hursmin.gn.v20190710|esgf3.dkrz.de'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'SHA256' '2ed51d2a33b5be8abd6f3971766a0174fb953c14fda7f38c78bbdebe1bbfdfd6'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'SHA256' '68be2b6e87415e385cc62e6a0c25ae3c85bc3310b31f7ec77a7a1900664d1512'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'SHA256' '52ed7f764a42f5d694823f04eb7e53e48538054e8ee39f90fcd01475778336fb'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'SHA256' '65620e1e9ea27dbdcfbdb5500f5089190a73aadd4aecd223052541112d0d8db4'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'SHA256' '8d21ff9b2aac2399e050b216abbaa4d4da1ccd804ec24e45c2b304f82586cbdd'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'SHA256' '347d5a013ae0db19fd9e2a8fd6b9f8f845d9c674f942b065fedb891746ea49de'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'SHA256' '686758a043adf9e9c1f46a7d56e99849ee551a44a3169fb575650505a6a51ca1'
'hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'f2cd632b81801b0b426dfea79c140c5f23285ab80d895a73cc6086481751a0c0'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'SHA256' '3d902dbe1ba9ede1ba430f6470a622455c3c4d69d09e91614d79915f3173ab45'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'SHA256' '4fee13108d073774b8d22d46cf258a001013ef937cc40443cfde43631bb323df'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'SHA256' '5f187f4aa1ea046a33d9630846f8a7c34bf77d5491dfb783693093fbd1e21399'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'SHA256' '3638b5b865c83bf77c15f316f6e5cfaca161c24c53d43d04de449e840528a6d3'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'SHA256' '5b700257d72083dcabffe6e690c799dfe7351b5deefb40ba6819db3f7d61eee4'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'SHA256' '301046b3c6a3de0584f183727ab7f096573d9dabc0a9d53671e04245174fad18'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'SHA256' '9fe0a772e65bf7e599407c450f27388b073abe925e3c283ddfbf38b0ceb291c7'
'pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '0bef4e74ed42b9fd5ced95d123c74f100364b22b6086563e64216f64d626c7a3'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'SHA256' 'cb09e81b510610337d7c55bc0380dcf83fdc9a8e75c75644d266f8b2ec9dfd90'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'SHA256' '9dd717516fb045d43211661ba40212dcfd747e22fcafd5d492d799173feb4f37'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'SHA256' 'aa1a49e5618439e4eed312fd6bdf71e855d99b7d2016f131e8819fab821c46c8'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'SHA256' '51d776e4c7244e8a2b1a992c83b96fe1307515e16b8096952eef493492be3a9c'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'SHA256' 'fb97fe1edba5f0bc42eb511b9878ed22d09667ce04554bca5174e5fcdf86fae0'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'SHA256' '85197b357c0ce44bbb1c14f72c19ae4cb4cbbecbd150ce0742cc356a90f27bfc'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'SHA256' 'a2b606b4635eea17d9098a125d2ef720caf1c898ab7855cc42b7ef255d99600c'
'tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '4e534449d378e1dc1b2dad908619e6d3b5e50c247fcb13c4a803a6de641c1859'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'SHA256' '1183deb9f698d28e5cc5fb0e75a7e4ae0e84ee492d6ba36f7a99fb3a62941039'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'SHA256' '15a48cde879b4ef559f1500c803297002c509e49cbc7e144d24b51d7675b2c4b'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'SHA256' 'f41f5b6fd26726b5a4b2bafe7e28d1557568fb6c7aa359abf00a3e9cbc4c2be2'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'SHA256' 'b006f7bc43e012179461485d187de65b19c4e93896b7698ce61cbf4d91622f92'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'SHA256' '2334318fed0dc06c4c2b1238c7d2aa1f497ebf78e389bc6251c6cc5bb45a906e'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'SHA256' 'bb393dccac6bf8c969da1b67433949afd247bf7af2123f041f520f6336f99571'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'SHA256' '97ffd5f0371f4f1658717820effb0874c9dae332b5225082d74c174df16f1804'
'uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '84d8b9798fc27808e86dad619d3aec636e41867f615c4ff0a7d94e02be8a5b41'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19750101-19791231.nc' 'SHA256' '0913f8dfcd41a9e00b3a38df0e5e86ce8d7cc8a2a0e05b7378cb586eb798cc99'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19800101-19841231.nc' 'SHA256' 'd5493c6cf23074c495e846c0b167c49bd168faa964dbd317e05ada1c35b28fe8'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19850101-19891231.nc' 'SHA256' '2348b73a8aa546f2c34b1ed61c1ffb490d6e2bdb102d065e290a14e17d60cf9f'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19900101-19941231.nc' 'SHA256' '84ee2b05c0d221a726d0cada7c95b1dbadd35e00252eaf9631d0596a7e93348c'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_19950101-19991231.nc' 'SHA256' '676998e4cfcbe84cdad56014735d7bc786500557dfae3965c27fa6b954b7d580'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20000101-20041231.nc' 'SHA256' '23c07de4003ba80339c3518506d3e25ff5c2cbc62d9824beac1de91cbd438b8b'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20050101-20091231.nc' 'SHA256' '85bb77d33c26d7e56b18b10b49bf5ff97ad59740ba61b2982520b41ee69f619b'
'vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-HR/historical/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '473bbe714eda0f38bfc6eb5de5b199450157594a6e1bbf9f02c5fa92864801b0'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '3a62836c9878c940f42d619b9b4cb35a1ae7c52d1229c99a9aef06bf2b3a453e'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '940eaa42a65e09baa569523d24e9888f1ed137a6bbc9b374c2a3ab9a25aef4f7'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '2eb57a6312f34e21087d54d1a34fa681b61aed27e664d22ad5c57bd9588ef061'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '51af5058712509b8e2c766f761cd7d6e14bc7821efa62755fd2cf42ea5efb17d'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '82132e53c5f24f93701ea76974799409d3f8997a149b120829e8d541b3d1659c'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '0e6ae04189405f308a0b64c960eabefcfba303de1b37b6a74a4c75cd0b6f90b2'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' 'ba05c6682d2c55509efc4b97fa2adcd9e4075891eae88ed19b262a3f392ab439'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '4faf2637be6433f3d5c6d903655b7e0b28493fc48275925486ec03690d6f70ca'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '12b1d08b41aab1cda9200c06840acccad57206599ca0f6998be21cfaef7182b3'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' 'aab04ba14375be560be1e5ef6c723507094a7d2c5fe25d885fb0ba4645d006e3'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '7bcf9a38988b18be6b3a8ba738e087182d29fe52f9b49178f36a9fbf83ab872e'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' 'cc33e734cb3901a4e36ec6e2b4ff634fd972bf34833f09cb3e8b668bceb3a347'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'bc59954202e457c8d90f0498f97de7b82de56696fd58b61c03bb07b64e8c5459'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'd540a927311d579e10394fd97b3ec3c8a2cd0b83a8e67b7c860ef22253ce8d34'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' 'c8d47adcd382e15ed3e435a8b9b97ed74823e25771b85446a8e7d4308a7fd778'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '09f0d8314a4bf23d2fcd7ca4d74332e6c7f676c4a3fd37b7e858738f608706ec'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'cad9acb1d9eae25b28707ea2ae392f8954bebb504930249ec7b56e7e0a8363ec'
'hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/hursmin/gn/v20190710/hursmin_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '115602e6f2548dfda75123f3d01aa0afa1b3c93787a47c7450b0b2a709027583'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '9a3f0989b406059807a9dd532e5ff5a7e36d994ffc5f9cfba86188382bb833ee'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '6d635f1b38df2eb10274af85d3dae89071159f105676f6c75fd5a07d55ed3922'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '2f2091e78fae4e494e6368ab805ca7a84b0860872dc37d8a63cee6a8ff319afd'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'c3f30b0a7d64792d4ec457830014bf6f51bac3c64f7e16bd629be60190a1b999'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' 'f4b863ccf477569847cb4c42f470f67638a213b5fce45c9b29b22c0f0a5d023b'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' 'd142146c96d3c0d42e431f49aaf305b9fa1a4c66e7b15194a4f347e3e552e487'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '99ad44cc4f611067b415b214be9277fc22893279d0989dc2071ec9aab4f0b40c'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '6d9c342bc771cc6246835f71a6c36ec8bdb8d596d2cf1b4ed5bb8bfd7a74fb72'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' 'ac2049d67e236ae213883b776d5b907b0ccba21c8bfbc0876c87e01567105962'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '7250f92346749d4005e9b437b7d9be3648996b7b2844b9178f528df2154158d8'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '86cb762d27e6d0e27338959425be4760a442a423faa7ebd3f610025fe423153e'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '792f85ae2ba541051cc7c7573b911d12550495138237fb76074d9775fd8e5bc8'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'e87f2b00940125755ecc927f8ec6052330de93cf7afdd8706a03c7bfefd330c6'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '530bc6bac5a4625871073f17d81eac78aa602a30bc02046d11b5f460b22228c4'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' 'b61e9c80ad454d8f2c9bcbfe64e5e0c59733859a03d09dcf71d51408b39bcd01'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '54fef95937b7330a40feabbfbdb8059e0acf2ecfdbc85a0113cb65773877103d'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'e1dbd569e7ca5735fdefe5689d68f1d1d35299f0ddc137401b1bdee47b213567'
'pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '757d8b80d6d28f9ff365541b41685388e8815dffaea410f448903760ec445cd7'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' 'bb72029ec89338a905721cbe64ec8c1b006d7487279c97298d8452c5a9388493'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '5ff4a1116031e6df789f4262141c60e9e6aaa9653e83e4ff2560de259597b1f3'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '9ec6c63ac6dac7b1ef235aee93c1a471d0566be785aea28ce8f4b6acb83c77bc'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '14ebb814ca7071ae9de5bbabd5e1c2d35b09d26d8897704f8749daff54ca680c'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '0e2684a37e7d05ff0e904e53c531c46d40428d0d4c72af7d656a998420459663'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '179ca011463a3b732145eb767d7b64e4dde70b576df376b9793f4274a3291dbe'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' 'd3f4d5b508ca16f2962bc80a7ce304ef0c631dc74b1d63a5d1ab2cc38bdaa464'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '5b8bb6aed045404f9e1545e8268270b8b3b9c582a4824baaced8b9f7b4eccd43'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' 'c4058d2ab35fd7d00441eb24e40de50e0a53d171a1124a775ffd42bfa7c654fe'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' 'c417838bba07c465393ec89db4014d031bdd74c645c083974e22c685ed04490b'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'bc620f19577e96208630079543427da37882fc043a96264b543690a744f3405c'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '919727faf8b7ad0972c84b83c83e4b1ca5ed786ad78f2a28698a33b6c561ffad'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'c8e8ed514b6d380ee8d2bcaa818bff9f89f8b418828ae8409b8718aef240567a'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'dbf4b334b3a84058ede1ac7f575db1663bac6e454cbb89afb806ace378542033'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '36e58f3bb67a7b4f5e70de094b8d31e661afda479236053eaf90b23d728c3e05'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '8dd6f8a74051f9eccb860eb1fb6c1c330d7f8dd2045a0117d1cf7043c22146bd'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'b0a0a06317efbb3c1d095c74f7644a3a7c3d759926ec53b33bfbf99dd8fdccc4'
'tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '366c404f6a287385f204d296b914fa1a2b0b285f4d9199d79e2c15a1790de6a2'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '446ea32d0b899754fa896acc3b6be45e59f7bae17b7e035e13bcc4d2f64a4f48'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '6006081828bfa20a20b23c7f1791133f4f255339a2b1f411d10029c72a7ce365'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '41f989ef5b5f89f930fe39dc00d3c3f2a7a94d68ccc0f5093b86863b8fa1999c'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '7301f2f0a21fd3177ac3eb071ef925fddd18409a24815a38b4595f19f0b83e8b'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '66432b1a605ad7a2a1b5d931c9cbb89f2ee0d12349750d9bdcbfa6279fbbfcea'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '211e8cb7ccfad405e917a19add56e8d28429dae23d73ebaebdff2d4904843a75'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '35b094fa7d6b086f2a3b14abf1f49a5c4903adb3301e7940c0e57886f7f4c7d2'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '413c240db7bb7c3ed68be87ef80800c2a372b726de3cd82f9416c43b1606f4c6'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '58c21c9e1104e26f00dd218d0da93d26c6f1ba607a8d73af251f64cdf04e4031'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' 'dbfbf7c106b8156132d88fb78b1fc8b92ce4d458cfbb96d9f303de66357463ba'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'd11cf80a9ddf77b5aa36ebf2eb81815dd2b0715f68c34dbd5b95e045d4c733c1'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' 'cca26661fa44d59edd18dafb656770c44fec060ebb77944c0793983cf25aa5b5'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '56655fd2a591f8b58c9d928b931790454a5f3f7b5c27cc129da44ec99b0dca91'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '37d70d7282b8b71bbebeb47b623a6979a2e5abe3e55dc9832942bf92ec541c5b'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' 'f2f225ca6f3ce21e43c0628229d009a05ee09287b873572d4d87cf489d3f43fd'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '555094554045e0529b3bc2ead42027dc12c19834ce5c19644179a6f5eb4da7a9'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'efa934e608832855c21c21f6257164a5a326c58d5205d584be450f875e0d065a'
'uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/uas/gn/v20190710/uas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' 'c3cfbe5a2768790983d86f0b51e988472bf9f5813b71afa4813cf8967dfee1b0'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' 'c26bff1000223efef5eed407eac6d3e2f15dc4ef740e37c76172a927e91fd1be'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '1b4431044a1eb2fba09c7cf38e4306e61d44a148313eba12f7b89516ea6d2471'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' 'ff93e0dc226e737cf975715533dc65205969db4facc41cb0afe176072edad7f9'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'bfd32447f63b9cc5f734313fdf3e41e58e6be29c9e7fa8c081093f32ea43249c'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '4de11ea8527150a9d8f4d2d0e4584eab107e29016083f94ea710a0725fb6da40'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '8637b909f817de33dbd84d54b99425aeeca57bd088e49901e22becf57a4172b2'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '9c0fefb482e056e21016cff7728f1d14f2db413422b7bcff99ac02df0ceffd96'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' 'c3d6a0127b34249bd8fddeccdf9b8faebf608945fc2c84c76474da58d3616756'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' 'f65cef7309216bab6e52eac4a3445487f86cc33822b5d5f33f9927ea8995aed8'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' 'fcb78402940968998e25f824fb255418a4adf8bb57fefe17414859f45e7196f8'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'a6533ce94a5029000361e05cbae82cd198ad7e790017090f7d5ce7222ca9979d'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '2ce5b8ec5b76d017b1939ca8578b7ad3eb2d04fe2e5ebb1f0cd8381ffab16b4e'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '2bd1a7dddaf2ba1904c9eba6475d0dd4da1a0882eab8110e55af71ecfa0647f0'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'f4b350137d5ef8a79cdf4be27600097ae571e1df825f84a24e216d6b4014d945'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' 'ec98da32387ffe1e6f6507eb6f01f2944b2ec7ae4902086577703b84ac398eeb'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '7fad4fd0e2ff4bd78e4e876e1bfb8699186293d747bcf868f8be8997870c20b1'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' '30a0723c4785d76bb57b677c22d0985aade2a5389a5659bccd9709120db36b78'
'vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/day/vas/gn/v20190710/vas_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '15f7d6e3e0b9f5e9675c4b6e321725587905d764a67b4cc65f6f6cfaa22110b2'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 255 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
